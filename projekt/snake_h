import pygame, sys, random, time
from pygame.math import Vector2

class SNAKE():
    def __init__(self):
        self.body = [Vector2(5, 10), Vector2(4, 10), Vector2(3, 10)]
        self.direction = Vector2(1, 0)
        self.newBlock = False
        self.score = 0 # Dodana zmienna do sledzenia zjedzonych jablek
        self.level = 1
        self.clockRate = 10
        
        #zaladowanie grafiki weza
        self.headUp = pygame.image.load('graphics/snake/headUp.png').convert_alpha()
        self.headDown = pygame.image.load('graphics/snake/headDown.png').convert_alpha()
        self.headRight = pygame.image.load('graphics/snake/headRight.png').convert_alpha()
        self.headLeft = pygame.image.load('graphics/snake/headLeft.png').convert_alpha()
        
        self.tailUp = pygame.image.load('graphics/snake/tailUp.png').convert_alpha()
        self.tailDown = pygame.image.load('graphics/snake/tailDown.png').convert_alpha()
        self.tailRight = pygame.image.load('graphics/snake/tailRight.png').convert_alpha()
        self.tailLeft = pygame.image.load('graphics/snake/tailLeft.png').convert_alpha()
         
        self.bodyVertical = pygame.image.load('graphics/snake/bodyVertical.png').convert_alpha()
        self.bodyHorizontal = pygame.image.load('graphics/snake/bodyHorizontal.png').convert_alpha()
         
        self.bodyTopRight = pygame.image.load('graphics/snake/bodyTopRight.png').convert_alpha()
        self.bodyTopLeft = pygame.image.load('graphics/snake/bodyTopLeft.png').convert_alpha()
        self.bodyBottomRight = pygame.image.load('graphics/snake/bodyBottomRight.png').convert_alpha()
        self.bodyBottomLeft = pygame.image.load('graphics/snake/bodyBottomLeft.png').convert_alpha()

    def drawSnake(self):
        self.updateHeadGraphics()
        self.updateTailGraphics()
        
        for index, block in enumerate(self.body):  # który index w liście
            # rect do pozycjonowania
            xPosition = int(block.x * cellSize)
            yPosition = int(block.y * cellSize)
            blockRect = pygame.Rect(xPosition, yPosition, cellSize, cellSize)
            
            
            # w ktora strone patrzy waz
            if index == 0:
                gameScreen.blit(self.head, blockRect)
            elif index == len(self.body) - 1:
                gameScreen.blit(self.tail, blockRect)
            else:
                previousBlock = self.body[index + 1] - block
                nextBlock = self.body[index - 1] - block
                if previousBlock.x == nextBlock.x:
                    gameScreen.blit(self.bodyVertical, blockRect)
                elif previousBlock.y == nextBlock.y:
                    gameScreen.blit(self.bodyHorizontal, blockRect)
                else:
                    if previousBlock.x == -1 and nextBlock.y == -1 or previousBlock.y == -1 and nextBlock.x == -1:
                        gameScreen.blit(self.bodyTopLeft, blockRect)
                    elif previousBlock.x == -1 and nextBlock.y == 1 or previousBlock.y == 1 and nextBlock.x == -1:
                        gameScreen.blit(self.bodyBottomLeft, blockRect)
                    elif previousBlock.x == 1 and nextBlock.y == -1 or previousBlock.y == -1 and nextBlock.x == 1:
                        gameScreen.blit(self.bodyTopRight, blockRect)
                    elif previousBlock.x == 1 and nextBlock.y == 1 or previousBlock.y == 1 and nextBlock.x == 1:
                        gameScreen.blit(self.bodyBottomRight, blockRect)

    def updateHeadGraphics(self):
        headRelation = self.body[1] - self.body[0]
        if headRelation == Vector2(1,0):
            self.head = self.headLeft
        elif headRelation == Vector2(-1,0):
            self.head = self.headRight
        elif headRelation == Vector2(0,1):
            self.head = self.headUp
        elif headRelation == Vector2(0,-1):
            self.head = self.headDown

    def updateTailGraphics(self):
        tailRelation = self.body[-2] - self.body[-1]
        if tailRelation == Vector2(1,0):
            self.tail = self.tailLeft
        elif tailRelation == Vector2(-1,0):
            self.tail = self.tailRight
        elif tailRelation == Vector2(0,1):
            self.tail = self.tailUp
        elif tailRelation == Vector2(0,-1):
            self.tail = self.tailDown

    def moveSnake(self):
        if self.newBlock:
            bodyCopy = self.body[:]
            self.newBlock = False
        else:
            bodyCopy = self.body[:-1]

        bodyCopy.insert(0, bodyCopy[0] + self.direction)
        self.body = bodyCopy[:]

    def addBlock(self):
        self.newBlock = True
        self.score += 1

class FRUIT:
    def __init__(self):
        # tworzenie losowych pozycji x i y, żeby owoc nie wychodzil poza zakres okna programu
        self.randomize()

    def drawFruit(self):
        # tworzenie owocu w ksztalcie kwadratu o szerokosci jednego okna siatki w losoych pozycjach na siatce
        fruitRect = pygame.Rect(int(self.position.x * cellSize), int(self.position.y * cellSize), cellSize,
                                cellSize)  # int bo self.position.x bedzie typu float
        # rysowanie "owocu"
        gameScreen.blit(honey, fruitRect)

    def randomize(self):
        self.x = random.randint(0, cellNumber - 1)
        self.y = random.randint(0, cellNumber - 1)
        self.position = Vector2(self.x, self.y)

class MAIN:
    def __init__(self):
        self.snake = SNAKE()
        self.fruit = FRUIT()
        self.state = "MENU"

    def update(self):
        if self.state == "MENU":
            self.menu()
        elif self.state == "PLAY":
            self.play()
        elif self.state == "GAME_OVER":
            self.gameOver()

    def menu(self):
        font = pygame.font.Font('project/Happiness Mood Demo.ttf', 50)
        text1 = font.render("1. Start Game", True, (255, 255, 255))
        text2 = font.render("2. Quit", True, (255, 255, 255))
        gameScreen.blit(text1, (50, 100))
        gameScreen.blit(text2, (50, 200))
        pygame.display.update()

        for event in pygame.event.get():
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_1:
                    self.state = "PLAY"
                elif event.key == pygame.K_2:
                    pygame.quit()
                    sys.exit()

    def play(self):
        self.snake.moveSnake()
        self.snakeEat()        
        self.checkGameOver()

        gameScreen.fill((240, 202, 98))        
               
        self.drawElements()
        self.displayScore()
        self.displayLevel()
        pygame.display.update()              
        clock.tick(self.snake.clockRate)
                
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_w:
                    if self.snake.direction.y != 1:
                        self.snake.direction = Vector2(0, -1)
                elif event.key == pygame.K_s:
                    if self.snake.direction.y != -1:
                        self.snake.direction = Vector2(0, 1)
                elif event.key == pygame.K_d:
                    if self.snake.direction.x != -1:
                        self.snake.direction = Vector2(1, 0)
                elif event.key == pygame.K_a:
                    if self.snake.direction.x != 1:
                        self.snake.direction = Vector2(-1, 0)
    
    def gameOver(self):
        font = pygame.font.Font('project/Happiness Mood Demo.ttf', 40)
        text1 = font.render(f"Game Over. Total Score: {self.snake.score + 5 * self.snake.level -5}", True, (255, 255, 255))
        text2 = font.render("1 - Play Again", True, (255, 255, 255))
        text3 = font.render("2 - Quit", True, (255, 255, 255))
        gameScreen.blit(text1, (100, 100))
        gameScreen.blit(text2, (100, 200))
        gameScreen.blit(text3, (100, 300))
        pygame.display.update()

        for event in pygame.event.get():
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_1:
                    self.state = "PLAY"
                    self.snake = SNAKE()
                elif event.key == pygame.K_2:
                    pygame.quit()
                    sys.exit()

    def drawElements(self):
        self.creatingBg()
        self.fruit.drawFruit()
        self.snake.drawSnake()
               
    def snakeEat(self):
        if self.fruit.position == self.snake.body[0]:
            self.fruit.randomize()
            self.snake.addBlock()
            if self.snake.score % 5 == 0:  # sprawdzanie czy wynik jest podzielny przez 5               
                self.snake.level += 1
                self.snake.score = 0
                self.snake.body = [Vector2(5, 10), Vector2(4, 10), Vector2(3, 10)]
                self.snake.direction = Vector2(1, 0)
                self.snake.clockRate += 4     
                      
    def checkGameOver(self):        
        if not 0 <= self.snake.body[0].x < cellNumber or not 0 <= self.snake.body[0].y < cellNumber:
            self.state = "GAME_OVER"
        for snakePart in self.snake.body[1:]:
            if snakePart == self.snake.body[0]:
                self.state = "GAME_OVER"

    def displayScore(self):
        font = pygame.font.Font('project/Happiness Mood Demo.ttf', 30)
        text = font.render(f"Score: {self.snake.score}", True, (255, 255, 255))
        gameScreen.blit(text, (10, 10))

    def displayLevel(self):
        font = pygame.font.Font('project/Happiness Mood Demo.ttf', 30)
        text = font.render(f"Level: {self.snake.level}", True, (255, 255, 255))
        gameScreen.blit(text, (150, 10))
        
    def creatingBg(self):
        honeycombColor = (240, 195, 72)               
        
        for row in range(cellNumber):
            if row % 2 == 0:
                for column in range(cellNumber):
                    if column % 2 == 0:
                        honeycomb = pygame.Rect(column * cellSize, row * cellSize, cellSize, cellSize)
                        pygame.draw.rect(gameScreen, honeycombColor, honeycomb)
            else:
                for column in range(cellNumber):
                    if column % 2 != 0:
                        honeycomb = pygame.Rect(column * cellSize, row * cellSize, cellSize, cellSize)
                        pygame.draw.rect(gameScreen, honeycombColor, honeycomb)  


# inicjalizacja modulow pygame
pygame.init()

# tworzenie okna gry
cellSize = 30
cellNumber = 25

gameScreen = pygame.display.set_mode((cellSize * cellNumber, cellNumber * cellSize))
gameIcon = pygame.image.load('graphics/snake_head.png')
pygame.display.set_caption('Snake by HSKP')
pygame.display.set_icon(gameIcon)
clock = pygame.time.Clock()
honey = pygame.image.load('graphics/miodzio.png').convert_alpha()  # latwiejsze wyswietlanie https://pl.freepik.com/search?format=search&icon_color=multicolor&last_filter=icon_color&last_value=multicolor&query=honey&shape=fill&type=icon" - Ikona autorstwa Smashicons

# inicjalizacja zmiennych i obiektow gry
mainGame = MAIN()
screenUpdate = pygame.USEREVENT
pygame.time.set_timer(screenUpdate, 150)

# glowna petla programu
while True:
    mainGame.update()
